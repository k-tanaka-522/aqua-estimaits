// <auto-generated />
using System;
using AquaGrow.Api.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AquaGrow.Api.Migrations
{
    [DbContext(typeof(AquaGrowDbContext))]
    partial class AquaGrowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("AquaGrow.Api.Data.Entities.Land", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Memo")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PowerSource")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sunlight")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("WaterSource")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Lands");

                    b.HasData(
                        new
                        {
                            Id = "land-001",
                            Address = "新潟県新潟市",
                            Area = 600.0,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Latitude = 37.9161,
                            Longitude = 139.03639999999999,
                            Name = "新潟農地A",
                            PowerSource = true,
                            Sunlight = "full_sun",
                            Terrain = "flat",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "user-001",
                            WaterSource = true
                        });
                });

            modelBuilder.Entity("AquaGrow.Api.Data.Entities.Simulation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("AnnualCost")
                        .HasColumnType("REAL");

                    b.Property<double>("AnnualProfit")
                        .HasColumnType("REAL");

                    b.Property<double>("AnnualRevenue")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("CultivationArea")
                        .HasColumnType("REAL");

                    b.Property<string>("FishType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("InitialInvestment")
                        .HasColumnType("REAL");

                    b.Property<string>("LandId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("PaybackPeriod")
                        .HasColumnType("REAL");

                    b.Property<double>("RetailPrice")
                        .HasColumnType("REAL");

                    b.Property<double>("RetailRatio")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VegetableTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("WholesalePrice")
                        .HasColumnType("REAL");

                    b.Property<double>("WholesaleRatio")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LandId");

                    b.HasIndex("UserId");

                    b.ToTable("Simulations");
                });

            modelBuilder.Entity("AquaGrow.Api.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "user-001",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@example.com",
                            Name = "テストユーザー",
                            PasswordHash = "$2a$11$ExampleHashForDevelopment",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AquaGrow.Api.Data.Entities.Land", b =>
                {
                    b.HasOne("AquaGrow.Api.Data.Entities.User", "User")
                        .WithMany("Lands")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AquaGrow.Api.Data.Entities.Simulation", b =>
                {
                    b.HasOne("AquaGrow.Api.Data.Entities.Land", "Land")
                        .WithMany("Simulations")
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AquaGrow.Api.Data.Entities.User", "User")
                        .WithMany("Simulations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AquaGrow.Api.Data.Entities.Land", b =>
                {
                    b.Navigation("Simulations");
                });

            modelBuilder.Entity("AquaGrow.Api.Data.Entities.User", b =>
                {
                    b.Navigation("Lands");

                    b.Navigation("Simulations");
                });
#pragma warning restore 612, 618
        }
    }
}
